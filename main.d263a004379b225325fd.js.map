{"version":3,"sources":["webpack:///./index.js"],"names":["document","querySelector","addEventListener","task","console","clear","delay","ms","Promise","resolve","reject","setTimeout","logger","time","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","getTask","target"],"mappings":"8JAEmBA,SAASC,cAAc,YAC/BC,iBAAiB,SAAS,aAMrC,SAAiBC,GACf,GAAa,MAATA,EAAc,CAIhBC,QAAQC,QACR,IAAMC,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,kBAAMF,EAAQF,KAAKA,OAG5BK,EAAS,SAAAC,GAAI,OAAIT,QAAQU,IAAR,kBAA8BD,EAA9B,OAIvB,OAHAP,EAAM,KAAMS,KAAKH,GACjBN,EAAM,KAAMS,KAAKH,QACjBN,EAAM,MAAMS,KAAKH,GAEZ,GAAa,MAATT,EAAc,CAIvBC,QAAQC,QACR,IAAMW,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAO,IAAIhB,SAAQ,SAACC,EAASC,GAC3BD,EAAQa,OAGNV,EAAS,SAAAU,GAAY,OAAIlB,QAAQqB,MAAMH,IAG7C,OAFAH,EAAgBH,EAAO,SAASD,KAAKH,QACrCO,EAAgBH,EAAO,OAAOD,KAAKH,GAE9B,GAAa,MAATT,EAAc,CAIvBC,QAAQC,QACR,IAGMqB,EAAkB,SAAAC,GACtB,IAJiCC,EAAKC,EAIhCvB,GAJ2BsB,EAIO,IAJFC,EAIO,IAHtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAIpD,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUmB,KAAKE,SAAW,GAEjCvB,EAAQkB,EAAYM,GAAI3B,GAExBI,EAAOiB,EAAYM,MAEpB3B,OAGD4B,EAAa,SAACD,EAAIpB,GACtBT,QAAQU,IAAR,eAA2BmB,EAA3B,iBAA8CpB,EAA9C,OAEIsB,EAAW,SAAAF,GACf7B,QAAQgC,KAAR,gCACkCH,EADlC,8BAIFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMtB,KAAKmB,GAAYI,MAAMH,GAC/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,IA5ElEI,CADmD,EAAbC,OACvBP,OAGjB7B,QAAQU,IAAI,iD","file":"main.d263a004379b225325fd.js","sourcesContent":["import './sass/styles.scss';\r\n\r\nconst buttonsRef = document.querySelector('.buttons');\r\nbuttonsRef.addEventListener('click', ({ target }) => {\r\n  getTask(target.id);\r\n});\r\n\r\nconsole.log('Нажми на кнопку выбора задания для проверки.');\r\n\r\nfunction getTask(task) {\r\n  if (task === '1') {\r\n    /*\r\n     *Task #1\r\n     */\r\n    console.clear();\r\n    const delay = ms => {\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => resolve(ms), ms);\r\n      });\r\n    };\r\n    const logger = time => console.log(`Resolved after ${time}ms`);\r\n    delay(2000).then(logger);\r\n    delay(1000).then(logger);\r\n    delay(1500).then(logger);\r\n    return;\r\n  } else if (task === '2') {\r\n    /*\r\n     *Task #2\r\n     */\r\n    console.clear();\r\n    const users = [\r\n      { name: 'Mango', active: true },\r\n      { name: 'Poly', active: false },\r\n      { name: 'Ajax', active: true },\r\n      { name: 'Lux', active: false },\r\n    ];\r\n    const toggleUserState = (allUsers, userName) => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n      return new Promise((resolve, reject) => {\r\n        resolve(updatedUsers);\r\n      });\r\n    };\r\n    const logger = updatedUsers => console.table(updatedUsers);\r\n    toggleUserState(users, 'Mango').then(logger);\r\n    toggleUserState(users, 'Lux').then(logger);\r\n    return;\r\n  } else if (task === '3') {\r\n    /*\r\n     *Task #3\r\n     */\r\n    console.clear();\r\n    const randomIntegerFromInterval = (min, max) => {\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    };\r\n    const makeTransaction = transaction => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          const canProcess = Math.random() > 0.3;\r\n          if (canProcess) {\r\n            resolve(transaction.id, delay);\r\n          } else {\r\n            reject(transaction.id);\r\n          }\r\n        }, delay);\r\n      });\r\n    };\r\n    const logSuccess = (id, time) => {\r\n      console.log(`Transaction ${id} processed in ${time}ms`);\r\n    };\r\n    const logError = id => {\r\n      console.warn(\r\n        `Error processing transaction ${id}. Please try again later.`,\r\n      );\r\n    };\r\n    makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n    makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n    makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n    makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n    return;\r\n  }\r\n}\r\n"],"sourceRoot":""}